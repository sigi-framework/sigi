// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ts-plugin specs should output hmr codes 1`] = `
"import { Module, Effect } from '@sigi/core';
import { Request } from 'express';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';
interface AState {
}
@Module('MA')
export class ModuleA extends EffectModule<AState> {
    @Effect()
    whatever(payload$: Observable<string>) {
        return payload$.pipe(map(() => this.createNoopAction()));
    }
}
if (process.env.NODE_ENV === "development" && module.hot) {
    module.hot.accept();
    module.hot.dispose(() => {
        const { rootInjector } = require("@sigi/di");
        const instance = rootInjector
            .
                getInstance(ModuleA);
        Module.removeModule("MA", instance);
    });
}
"
`;

exports[`ts-plugin specs should skip inject hmr codes if non module name 1`] = `
"import { Module, Effect } from '@sigi/core';
import { Request } from 'express';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';
interface AState {
}
@Module()
export class ModuleA extends EffectModule<AState> {
    @Effect()
    whatever(payload$: Observable<string>) {
        return payload$.pipe(map(() => this.createNoopAction()));
    }
}
"
`;

exports[`ts-plugin specs should transform alias 1`] = `

File: alias.tsx
TypeScript before transform:
  import { EffectModule, Module, Effect as _Effect } from '@sigi/core'
  import { Request } from 'express'
  import { Observable } from 'rxjs'
  import { map } from 'rxjs/operators'
  
  interface AState {}
  
  @Module('A')
  export class ModuleA extends EffectModule<AState> {
    @_Effect({
      payloadGetter: (req: Request) => {
        return require('md5')('hello')
      }
    })
    whatever(payload$: Observable<string>) {
      return payload$.pipe(
        map(() => this.createNoopAction())
      )
    }
  }
  
      ↓ ↓ ↓ ↓ ↓ ↓
TypeScript after transform:
  import { EffectModule, Module, Effect as _Effect } from '@sigi/core';
  import { Request } from 'express';
  import { Observable } from 'rxjs';
  import { map } from 'rxjs/operators';
  interface AState {
  }
  @Module('A')
  export class ModuleA extends EffectModule<AState> {
    @_Effect({})
    whatever(payload$: Observable<string>) {
      return payload$.pipe(map(() => this.createNoopAction()));
    }
  }
  

`;

exports[`ts-plugin specs should transform do-nothing 1`] = `

File: do-nothing.tsx
TypeScript before transform:
  import { EffectModule, Module } from '@sigi/core'
  import { Effect } from 'not-sigi'
  import { Request } from 'express'
  import { Observable } from 'rxjs'
  import { map } from 'rxjs/operators'
  
  interface AState {}
  
  @Module('A')
  export class ModuleA extends EffectModule<AState> {
    @Effect({
      payloadGetter: (req: Request) => {
        return require('md5')('hello')
      }
    })
    whatever(payload$: Observable<string>) {
      return payload$.pipe(
        map(() => this.createNoopAction())
      )
    }
  
    normalMethod() {
  
    }
  }
  
      ↓ ↓ ↓ ↓ ↓ ↓
TypeScript after transform:
  import { EffectModule, Module } from '@sigi/core';
  import { Effect } from 'not-sigi';
  import { Request } from 'express';
  import { Observable } from 'rxjs';
  import { map } from 'rxjs/operators';
  interface AState {
  }
  @Module('A')
  export class ModuleA extends EffectModule<AState> {
    @Effect({
      payloadGetter: (req: Request) => {
        return require('md5')('hello');
      }
    })
    whatever(payload$: Observable<string>) {
      return payload$.pipe(map(() => this.createNoopAction()));
    }
    normalMethod() {
    }
  }
  

`;

exports[`ts-plugin specs should transform do-nothing-2 1`] = `

File: do-nothing-2.tsx
TypeScript before transform:
  import { Effect, EffectModule, Module } from 'not-sigi'
  import { Request } from 'express'
  import { Observable } from 'rxjs'
  import { map } from 'rxjs/operators'
  
  interface AState {}
  
  @Module('A')
  export class ModuleA extends EffectModule<AState> {
    @Effect({
      payloadGetter: (req: Request) => {
        return require('md5')('hello')
      }
    })
    whatever(payload$: Observable<string>) {
      return payload$.pipe(
        map(() => this.createNoopAction())
      )
    }
  
    normalMethod() {
  
    }
  }
  
      ↓ ↓ ↓ ↓ ↓ ↓
TypeScript after transform:
  import { Effect, EffectModule, Module } from 'not-sigi';
  import { Request } from 'express';
  import { Observable } from 'rxjs';
  import { map } from 'rxjs/operators';
  interface AState {
  }
  @Module('A')
  export class ModuleA extends EffectModule<AState> {
    @Effect({
      payloadGetter: (req: Request) => {
        return require('md5')('hello');
      }
    })
    whatever(payload$: Observable<string>) {
      return payload$.pipe(map(() => this.createNoopAction()));
    }
    normalMethod() {
    }
  }
  

`;

exports[`ts-plugin specs should transform do-nothing-4 1`] = `

File: do-nothing-4.tsx
TypeScript before transform:
  import { EffectModule, Module, Effect } from '@sigi/core'
  import { Request } from 'express'
  import { Observable } from 'rxjs'
  import { map } from 'rxjs/operators'
  
  interface AState {}
  
  const PayloadGetterString = 'payloadGetter'
  
  @Module('A')
  export class ModuleA extends EffectModule<AState> {
    @Effect({
      payloadGetterTypo: (req: Request) => {
        return require('md5')('hello')
      }
    })
    whatever(payload$: Observable<string>) {
      return payload$.pipe(
        map(() => this.createNoopAction())
      )
    }
  
    @Effect({
      [PayloadGetterString]: (req: Request) => {
        return require('md5')('hello')
      }
    })
    whatever1(payload$: Observable<string>) {
      return payload$.pipe(
        map(() => this.createNoopAction())
      )
    }
  
    @Effect
    normalMethod() {
  
    }
  }
  
      ↓ ↓ ↓ ↓ ↓ ↓
TypeScript after transform:
  import { EffectModule, Module, Effect } from '@sigi/core';
  import { Request } from 'express';
  import { Observable } from 'rxjs';
  import { map } from 'rxjs/operators';
  interface AState {
  }
  const PayloadGetterString = 'payloadGetter';
  @Module('A')
  export class ModuleA extends EffectModule<AState> {
    @Effect({})
    whatever(payload$: Observable<string>) {
      return payload$.pipe(map(() => this.createNoopAction()));
    }
    @Effect({})
    whatever1(payload$: Observable<string>) {
      return payload$.pipe(map(() => this.createNoopAction()));
    }
    @Effect
    normalMethod() {
    }
  }
  

`;

exports[`ts-plugin specs should transform do-notiong-3 1`] = `

File: do-notiong-3.tsx
TypeScript before transform:
  import '@sigi/core'
  import { Request } from 'express'
  import { Observable } from 'rxjs'
  import { map } from 'rxjs/operators'
  
  interface AState {}
  
  @Module('A')
  export class ModuleA extends EffectModule<AState> {
    @Effect({
      payloadGetter: (req: Request) => {
        return require('md5')('hello')
      }
    })
    whatever(payload$: Observable<string>) {
      return payload$.pipe(
        map(() => this.createNoopAction())
      )
    }
  
    normalMethod() {
  
    }
  }
  
      ↓ ↓ ↓ ↓ ↓ ↓
TypeScript after transform:
  import '@sigi/core';
  import { Request } from 'express';
  import { Observable } from 'rxjs';
  import { map } from 'rxjs/operators';
  interface AState {
  }
  @Module('A')
  export class ModuleA extends EffectModule<AState> {
    @Effect({
      payloadGetter: (req: Request) => {
        return require('md5')('hello');
      }
    })
    whatever(payload$: Observable<string>) {
      return payload$.pipe(map(() => this.createNoopAction()));
    }
    normalMethod() {
    }
  }
  

`;

exports[`ts-plugin specs should transform named-import 1`] = `

File: named-import.tsx
TypeScript before transform:
  import { EffectModule, Module, Effect } from '@sigi/core'
  import { Request } from 'express'
  import { Observable } from 'rxjs'
  import { map } from 'rxjs/operators'
  
  interface AState {}
  
  @Module('A')
  export class ModuleA extends EffectModule<AState> {
    @Effect({
      skipFirstClientDispatch: true,
      payloadGetter: (req: Request) => {
        return require('md5')('hello')
      },
    })
    whatever(payload$: Observable<string>) {
      return payload$.pipe(
        map(() => this.createNoopAction())
      )
    }
  }
  
      ↓ ↓ ↓ ↓ ↓ ↓
TypeScript after transform:
  import { EffectModule, Module, Effect } from '@sigi/core';
  import { Request } from 'express';
  import { Observable } from 'rxjs';
  import { map } from 'rxjs/operators';
  interface AState {
  }
  @Module('A')
  export class ModuleA extends EffectModule<AState> {
    @Effect({})
    whatever(payload$: Observable<string>) {
      return payload$.pipe(map(() => this.createNoopAction()));
    }
  }
  

`;

exports[`ts-plugin specs should transform namespace-import 1`] = `

File: namespace-import.tsx
TypeScript before transform:
  import * as Sigi from '@sigi/core'
  import { Request } from 'express'
  import { Observable } from 'rxjs'
  import { map } from 'rxjs/operators'
  
  interface AState {}
  
  @Sigi.Module('A')
  export class ModuleA extends Sigi.EffectModule<AState> {
    @Sigi.Effect({
      payloadGetter: (req: Request) => {
        return require('md5')('hello')
      }
    })
    whatever(payload$: Observable<string>) {
      return payload$.pipe(
        map(() => this.createNoopAction())
      )
    }
  }
  
      ↓ ↓ ↓ ↓ ↓ ↓
TypeScript after transform:
  import * as Sigi from '@sigi/core';
  import { Request } from 'express';
  import { Observable } from 'rxjs';
  import { map } from 'rxjs/operators';
  interface AState {
  }
  @Sigi.Module('A')
  export class ModuleA extends Sigi.EffectModule<AState> {
    @Sigi.Effect({})
    whatever(payload$: Observable<string>) {
      return payload$.pipe(map(() => this.createNoopAction()));
    }
  }
  

`;

exports[`ts-plugin specs should transform no-argument 1`] = `

File: no-argument.tsx
TypeScript before transform:
  import { EffectModule, Module, Reducer, Effect } from '@sigi/core'
  import { Request } from 'express'
  import { Observable } from 'rxjs'
  import { map } from 'rxjs/operators'
  
  interface AState {}
  
  @Module('A')
  export class ModuleA extends EffectModule<AState> {
    @Effect()
    whatever(payload$: Observable<string>) {
      return payload$.pipe(
        map(() => this.createNoopAction())
      )
    }
  
    @Reducer()
    reducer(state: AState) {
      return { ...state }
    }
  }
  
      ↓ ↓ ↓ ↓ ↓ ↓
TypeScript after transform:
  import { EffectModule, Module, Reducer, Effect } from '@sigi/core';
  import { Request } from 'express';
  import { Observable } from 'rxjs';
  import { map } from 'rxjs/operators';
  interface AState {
  }
  @Module('A')
  export class ModuleA extends EffectModule<AState> {
    @Effect()
    whatever(payload$: Observable<string>) {
      return payload$.pipe(map(() => this.createNoopAction()));
    }
    @Reducer()
    reducer(state: AState) {
      return { ...state };
    }
  }
  

`;

exports[`ts-plugin specs should transform without-named-binding 1`] = `

File: without-named-binding.tsx
TypeScript before transform:
  import { EffectModule, Module } from '@sigi/core'
  import { Request } from 'express'
  import { Observable } from 'rxjs'
  import { map } from 'rxjs/operators'
  
  interface AState {}
  
  @Module('A')
  export class ModuleA extends EffectModule<AState> {
    @Effect({
      payloadGetter: (req: Request) => {
        return require('md5')('hello')
      }
    })
    whatever(payload$: Observable<string>) {
      return payload$.pipe(
        map(() => this.createNoopAction())
      )
    }
  }
  
      ↓ ↓ ↓ ↓ ↓ ↓
TypeScript after transform:
  import { EffectModule, Module } from '@sigi/core';
  import { Request } from 'express';
  import { Observable } from 'rxjs';
  import { map } from 'rxjs/operators';
  interface AState {
  }
  @Module('A')
  export class ModuleA extends EffectModule<AState> {
    @Effect({
      payloadGetter: (req: Request) => {
        return require('md5')('hello');
      }
    })
    whatever(payload$: Observable<string>) {
      return payload$.pipe(map(() => this.createNoopAction()));
    }
  }
  

`;
